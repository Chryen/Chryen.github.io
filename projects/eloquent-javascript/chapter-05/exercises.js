// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(arrays) {
    return arrays.reduce((flat, current) => flat.concat(current));  // reduces arrays then concats and return
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(value, test, update, body) {
    for(let i = value; test(i); i = update(i)){ // set up for loop with parameters value test update and body
        body(i);
    }
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(array, test) {
    for(let i = 0; i < array.length; i++){  // set up for loop to loop through given array
        if(!test(array[i])){    // if negation of function test on array[i] return false
            return false;
        }
    }
    return true;    // else return true
}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(text) {
    let counted = countBy(text, char => {    // set variable counted to perform countBy function with parameter text, char
        let script = characterScript(char.codePointAt(0));  // set variable script to perform characterScript on char and codePointAt to return positive integer at index 0
        return script ? script.direction : "none";  // return script.direction if script is true else "none"
    }).filter(({name}) => name !== "none");  // filters countBy function so name does not equal none
    if (counted.length === 0) return "ltr";  // if length of counted equals 0 return ;tr
    return counted.reduce((a, b) => a.count > b.count ? a : b).name;    // returns counted reduced by a or ba`````
}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
